"""Main function is at the bottom of the script."""
import numpy  as np
import random as rand

def generateBinaryMatrix():
    """Creates a 64x6 matrix where
    each cells contains 0 or 1 and
    each row represents a unique 6 digit binary number"""
    mat = np.matrix([0,0,0,0,0,0])
    for i in range(1,64):
        mat = np.vstack([mat,[int(x) for x in bin(i)[2:].zfill(6)]]) # shamelessly modified from stackoverflow
    return mat

def generateChessBoard():
    """Creates a 1x64 matrix where
    each cell is randomly 0 or 1"""
    mat = []
    for i in range(64):
        mat.append(rand.randint(0,1))
    return mat
    
def findSignal(board, binaryMatrix):
    """Finds signal from a given board state in binary"""
    signal = np.ndarray.tolist((np.matrix(board) * binaryMatrix)%2)
    return "".join(str(x) for x in signal[0])

def flipOneCoin(board, square):
    """Changed one square on board from 0 to 1 or 1 to 0"""
    board[square-1] = (board[square-1]+1)%2

def findCoinToFlip(board, magicSquare, binaryMatrix):
    """Finds coin that has to be flipped"""
    print("\nFinding coin the flip...")
    currentSignal = findSignal(board, binaryMatrix)
    print("The current signal the board sends is:", currentSignal)
    desiredSignal = convertIntToBinary(magicSquare-1)
    print("The desired signal to send it:", desiredSignal)

    coin = ""

    for x in range(6):
        coin += str((int(currentSignal[x]) + int(desiredSignal[x]))%2)

    print("The board will send the desired signal if the coin on square #", convertBinaryToInt(coin)+1, " is flipped.", sep="")
    print("This was calculated by taking XOR of each corresponding digits of the desired and current signal, then converting to base 10 and changing the indexing.\n")

    return convertBinaryToInt(coin)+1

def generateMagicSquare():
    """Creates a random number from 1 to 64"""
    return rand.randint(1,64)

def convertIntToBinary(num):
    return bin(num)[2:].zfill(6)

def convertBinaryToInt(binary):
    return int(binary, 2)

def printBoard(board):
    string = ""
    for x in range(64):
        if x%8 == 0:
            string += "\n"
        string += str(board[x]) + " "
    string += "\n"
    print(string)

def main():

    """Prisoner 1 and 2 are together and discuss strategy. No board or magic square has been generated yet."""
    binaryMatrix = generateBinaryMatrix() # Prisoners decide on a matrix to use to decode a signal
    print("Prisoner 1 and 2 are together and discuss strategy. No board or magic square has been generated yet.")
    print("They decide to create a 64x6 matrix where each row represents a unique binary number.")
    print("They agree that the board state will be represented by a horizontal array where Heads is 1 and Tails is 0.")
    print("The first spot is the top left corner. The board is then numbered from left to right then up to down.")
    print("This meands the top left spot is #1, the top right spot is #8, and the bottom left spot is #64.")
    print("A signal will be generated by multiplying the board state by the constant 64x6 matrix.")
    print("During matrix multiplication, scalar addition will be replaced with an XOR gate.")
    print("The signal will be a 6 digit binary which can be converted to 64 base ten numbers.")
    print("When a coin is flipped, a new signal is made.")
    print("No two coin flips will produce the same signal.")
    print("Every signal can be produced with one coin flip.\n")
    print("Confident that the prisoners will be able to solve the riddle, Prisoner 1 enters the chess board room.\n")

    """Prisoner 1 leaves discussion room and enters chess board room."""
    board = generateChessBoard() # Jailor sets up the chess board
    print("The jailor sets up the board randomly:")
    printBoard(board)
    magicSquare = generateMagicSquare() # Jailor points to the magic square on the board
    print("The jailor picks the magic square randomly: #", magicSquare, sep="")
    coin = findCoinToFlip(board, magicSquare, binaryMatrix) # Prisoner 1 picks a coin to flip
    flipOneCoin(board, coin) # Prisoner 1 flips the coin changing the variable board
    print("Prisoner 1 flips over the coin on square #", coin, " after ensuring that the new board state will generate the correct signal.", sep="")
    print("Prisoner 1 leaves the room leaving the board like this:")
    printBoard(board)

    """Prisoner 1 leaves chess board room. Prisoner 2 enters chess board room."""
    """Variable magicSquare cannot be used by Prisoner 2."""
    print("Prisoner 2 enters the room and multiplies the board state by the agreed upon 64x6 matrix.")
    guess = convertBinaryToInt(findSignal(board, binaryMatrix)) + 1
    print("This leads Prisoner 2 to guess that #", guess, " is the magic square.", sep="")

    """Jailor checks if guess is the magic square."""
    isCorrect = magicSquare == guess
    print("The jailor tells the prisoners that this is:", isCorrect)

main()
